package ui;

import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import pcbPart.Part;

/**
 * The TextSaver will display the text created in createText method and the user
 * is then given the choice to save that text to a file. createText must be
 * implemented by the subclass of this class.
 *
 * @author Albin Hjalmas.
 */
public class BomSaver extends javax.swing.JFrame {

    boolean saved;
    
    /**
     * Creates new form TextSaver
     */
    public BomSaver() {
        initComponents();
        saved = false;
        textPane.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 14));
       
        // Do something when pressing the exit button.
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if(saved) {
                    setVisible(false);
                    return;
                }
                
                int res = JOptionPane.showConfirmDialog(
                        null, "Would you like to save BOM before exit?",
                        "Exit",
                        JOptionPane.YES_NO_CANCEL_OPTION
                );

                switch (res) {
                    case JOptionPane.CLOSED_OPTION:
                    case JOptionPane.CANCEL_OPTION:
                        return;
                    case JOptionPane.NO_OPTION:
                        setVisible(false);
                        break;
                    case JOptionPane.OK_OPTION:
                        saveBtn.setSelected(true);
                        setVisible(false);
                        break;
                }
            }
        });
    }
    
    /**
     * 
     * @param parts 
     */
    public void createBom(ArrayList<Part> parts, String projName) {
        saved = false;
        StringWriter sw = new StringWriter();
        ArrayList<ArrayList<Part>> sort = new ArrayList<>();
        String delimiter = "***************************************************";
        String delimiter2 = "---------------------------------------------------";
        String delimiter3 = "--                                               --";
        int w = delimiter.length();
        
        for(Part part : parts) {
            boolean added = false;
            for(ArrayList<Part> pl : sort) {
                if(part.getId().equals(pl.get(0).getId())) {
                    pl.add(part);
                    added = true;
                    break;
                }
            }
            
            if(!added) {
                ArrayList<Part> tmp = new ArrayList<>();
                tmp.add(part);
                sort.add(tmp);
            }
        }
        
        
        sw.write(delimiter + "\n");
        sw.write(ws((w - projName.length())/2 - 1) + "~" + projName + "~\n");
        sw.write("Date: " + new Date() + "\n");
        sw.write("Total number of parts: " + parts.size() + "\n");
        sw.write(delimiter + "\n");
        sw.write(String.format("%-40s %10s\n", "Part ID", "Qty"));
        sw.write(delimiter2 + "\n");
        
        for(ArrayList<Part> l : sort) {
            sw.write(String.format("%-40s %10s\n", l.get(0).getId(), 
                    Integer.toString(l.size())));
            sw.write(delimiter3 + "\n");
        }
        
        sw.write(delimiter);
        
        textPane.setText(sw.toString());
    }

    /**
     * Creates a string of whitespace.
     * @param amount the number of "space" characters in the whitespace string
     * @return a string of whitespace.
     */
    private String ws(int amount) {
        String str = "";
        for(int i=0; i<amount; i++) {
            str += ' ';
        }
        return str;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Bill Of Materials");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bill Of Materials"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        textPane.setEditable(false);
        jScrollPane1.setViewportView(textPane);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jPanel2.add(saveBtn);

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        jPanel2.add(closeBtn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        PrintWriter wr = null;
        try {
            JFileChooser fc = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("Text File", ".txt");
            fc.setFileFilter(filter);
            fc.showSaveDialog(null);
            
            File file = fc.getSelectedFile();
            if (file == null) {
                return;
            }
            
            String filePath = file.getAbsolutePath();
            if(!filePath.endsWith(".txt")) {
                file = new File(filePath + ".txt");
            }
            
            // Write text to file.
            wr = new PrintWriter(file);
            wr.write(textPane.getText());
            wr.flush();
            saved = true;
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Unable to save file!", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if(wr != null) {
                wr.close();
            }
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JEditorPane textPane;
    // End of variables declaration//GEN-END:variables

    
}
